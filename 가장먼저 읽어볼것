
https://www.youtube.com/watch?v=myYlGLFxZas
https://www.youtube.com/watch?v=6sfiAyKy8Jo&t=298s

git init
git add .
git commit -m "first commit"
git branch -M main
git remote remove origin
git remote add origin https://github.com/yeorijby/SchoolNextjsAdminDashBoardNoDB.git
git push -u origin main

////// 무조건 pull
//local의 파일들은 모두 날라가도 문제 없는 상황에서 "나는 그저 원격 git 저장소의 main를 내 local로 덮어 씌우고 싶다." 하는 상황에서 사용
git fetch --all
git reset --hard origin/main
git pull origin main



//==================================================================================================================
// 각 파일들 임포트 할때 경로를 판단하기 어려우면 몇가지 동작만 해주면 모든 경로에 @로 사용할 수 있도록 하는 방법
// 이것은 TypeScript 일 때 가능한 부분임!!
//==================================================================================================================
vite.config.ts 에다가 
맨처음에 import path from 'path' 이거하고 

  resolve:{
    alias : [{find:"@", replacement: path.resolve(__dirname, "src")}]
  }
이거를 내용에 집어넣고... 



tsconfig.json 에서 
  "compilerOptions": 의 맨처음 에 

    "paths" :{
      "@/*":["./src/*"]
    },
이거를 집어 넣는다. 




이렇게 하면 각 파일에서 SRC 밑에 있는 경로는 모두 @로 치환이 가능하다. 
EX : main.tsx에서 
import App from './App.tsx'
되어 있던 것을 
import App from '@/App.tsx'로 바꿀수 있다. 

//------------------------------------------------------------------------------------------------------------------



// 스니펫 정리
{
	"comp": {
		   "prefix": "comp",
		   "body": [
		 "const ${1:${TM_FILENAME_BASE/(.)(.*)/${1:/capitalize}${2}/}} = () => {",
		 "  return (",
		 "    <div>${1:${TM_FILENAME_BASE/(.)(.*)/${1:/capitalize}${2}/}}</div>",
		 "  )",
		 "}",
		 "",
		 "export default ${1:${TM_FILENAME_BASE/(.)(.*)/${1:/capitalize}${2}/}}" 
		   ],
		   "description": "Create a component"
	   },
	"compt": {
		    "prefix": "compt",
		    "body": [
				"const ${1:${TM_FILENAME_BASE/(.)(.*)/${1:/capitalize}${2}/}} = () => {",
				"  return (",
				"    <div className=''>${1:${TM_FILENAME_BASE/(.)(.*)/${1:/capitalize}${2}/}}</div>",
				"  )",
				"}",
				"",
				"export default ${1:${TM_FILENAME_BASE/(.)(.*)/${1:/capitalize}${2}/}}" 
		    ],
		    "description": "Create a component with tailwind classname"
	   },
	"divc": {
			"prefix": "divc",
			"body": [
				"<div className='${1}'>${2}</div>"
			],
			"description": ""
		},
	"image tag": {
		"prefix": "imgc",
		"body": [
			"<Image src='/${1}.png' alt='' width={${2}} height={${2}} className='${3}'/>"
		]
	}		
}



//==================================================================================================================
// prisma를 사용하기 위해서
//==================================================================================================================
npm init -y
npm install prisma --save-dev
npm install @prisma/client
npx prisma init

[typescript를 써야 의미가 있으므로 Typescript를 사용하기 위해서]
npm install typescript-node @type/node --save-dev
npx tsc --init

[모델을 파일로 만들어주는것]
npx prisma migrate dev --name init


[schema.prisma에 모델 정의 하고 .env에 db url 저장]
[기존에 쓰던 DB로 모델을 가져올때.. ]
npx prisma db full

[DB 에 모델내용을 추가 .. ]
npx prisma db fush

[Docker내의 postgresql 정보파일 위치]
/var/lib/postgresql/data/pg_hba.conf

[프리즈마 스투디오를 열때]
npx prisma studio

[시드파일을 생성하기 위해서]
1. package.json에 다음을 추가하고
  "prisma" : {
    "seed" : "ts-node prisma/seed.ts"
  },
1.1. 하지만 Next.js에서는 다음으로 수정해야 한다. 
  "prisma" : {
    "seed" : "ts-node --compiler-options {\"module\":\"CommonJs\"} prisma/seed.ts"
  },

2. 다음의 명령어를 실행한다. 
	npm install -d ts-node

npx prisma db seed


[이렇게 하고 나서 아무 TS 파일에서 ... 다음과 같이 사용 가능]
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main(){
	let result = await prisma.person.findMany();
	console.log(result);
}

//------------------------------------------------------------------------------------------------------------------

